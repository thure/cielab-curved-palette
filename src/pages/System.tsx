import React, { useState } from 'react'
import pick from 'lodash/pick'
import {
  Box,
  Button,
  Header,
  AddIcon,
  Text,
  ChevronEndIcon,
  DownloadIcon,
  FilesUploadIcon,
  Dialog,
  Input,
  Alert,
} from '@fluentui/react-northstar'
import { useHistory } from 'react-router-dom'

import { scoped } from '../lib/basePath'
import {
  EntityName,
  MainContent,
  PaletteListItem,
  ThemeListItem,
  InFlowDocs,
  Link,
} from '../components'
import { useAppDispatch, useAppSelector } from '../state/hooks'
import { palettesSlice } from '../state/palettes'
import { themesSlice } from '../state/themes'
import { systemSlice } from '../state/system'
import { paletteTemplate, themeTemplate } from '../lib/interfaces'
import { batch } from 'react-redux'
import { store } from '../state/store'

export const System = () => {
  const dispatch = useAppDispatch()
  const history = useHistory()

  const systemName = useAppSelector((state) => state.system.name)

  const palettes = useAppSelector((state) => state.palettes)
  const palettesIds = Object.keys(palettes)

  const themes = useAppSelector((state) => state.themes)
  const themeIds = Object.keys(themes)

  const [file, setFile] = useState<File | null>(null)
  const [parsing, setParsing] = useState<boolean>(false)
  const [importOpen, setImportOpen] = useState<boolean>(false)
  const [importError, setImportError] = useState<string>('')

  return (
    <MainContent>
      <EntityName
        name={systemName}
        emptyNameValue={'Untitled color system'}
        onChange={(value) =>
          dispatch(
            systemSlice.actions.setName({
              name: value,
            })
          )
        }
        onDelete={() => {
          batch(() => {
            dispatch(themesSlice.actions.reset())
            dispatch(palettesSlice.actions.reset())
            dispatch(systemSlice.actions.reset())
          })
        }}
        deleteLabel="Clear all data"
      />
      <Box
        styles={{
          display: 'flex',
          flexFlow: 'row wrap',
          marginInlineEnd: '-.5rem',
        }}
      >
        <Button
          icon={<DownloadIcon outline />}
          content="Download"
          onClick={() => {
            const el = document.createElement('a')
            el.setAttribute(
              'href',
              `data:application/json;charset=utf-8,${encodeURIComponent(
                JSON.stringify(
                  pick(store.getState(), ['system', 'themes', 'palettes'])
                )
              )}`
            )
            el.setAttribute(
              'download',
              `${systemName || 'Untitled color system'}.lccst`
            )
            el.click()
          }}
          styles={{ marginInlineEnd: '.5rem' }}
        />
        <Button
          icon={<FilesUploadIcon outline />}
          content="Import"
          onClick={() => setImportOpen(true)}
          styles={{ marginInlineEnd: '.5rem' }}
        />
        <Dialog
          open={importOpen}
          header="Import from LCCST file"
          content={
            <>
              {importError && <Alert danger content={importError} />}
              <Text as="p">
                If you have a file that was generated by this tool, you can load
                it into the tool here. This will clear all your current data.
                Please note you may experience bugs if the file is from an older
                version of this tool or if it’s been altered.
              </Text>
              <Input
                type="file"
                label="LCCST file"
                accept=".lccst"
                id="importfile"
                onChange={(e, props) =>
                  setFile(((e.target as HTMLInputElement).files as FileList)[0])
                }
              />
            </>
          }
          cancelButton={{
            disabled: parsing,
            content: 'Cancel',
            onClick: () => setImportOpen(false),
          }}
          confirmButton={{
            disabled: parsing || !file,
            loading: parsing,
            content: 'Import',
            onClick: (e, props) => {
              setParsing(true)
              const reader = new FileReader()
              reader.addEventListener('load', function (e) {
                try {
                  const importedState = JSON.parse(e.target.result.toString())
                  batch(() => {
                    dispatch(themesSlice.actions.reset())
                    dispatch(palettesSlice.actions.reset())
                    dispatch(systemSlice.actions.reset())
                    dispatch(
                      systemSlice.actions.setFromImport(importedState.system)
                    )
                    dispatch(
                      palettesSlice.actions.setFromImport(
                        importedState.palettes
                      )
                    )
                    dispatch(
                      themesSlice.actions.setFromImport(importedState.themes)
                    )
                  })
                  setParsing(false)
                  setImportOpen(false)
                  setImportError('')
                } catch (error) {
                  setParsing(false)
                  setImportError('Couldn’t parse the file provided.')
                }
              })
              reader.readAsText(file)
            },
          }}
        />
      </Box>
      <Header as="h2">Palettes</Header>
      {palettesIds.map((paletteId, _p) => (
        <PaletteListItem
          key={paletteId}
          id={paletteId}
          variant="link"
          {...palettes[paletteId]}
        />
      ))}
      <Button
        icon={<AddIcon outline />}
        content="Create a new palette"
        onClick={() => {
          const nextPalette = paletteTemplate()
          dispatch(palettesSlice.actions.create(nextPalette))
          history.push(scoped(`/palette/${nextPalette.id}`))
        }}
      />
      <Header as="h2">Themes</Header>
      {themeIds.map((themeId, _t) => {
        const theme = themes[themeId]
        return (
          <ThemeListItem
            key={themeId}
            onClick={() => history.push(scoped(`/theme/${themeId}`))}
          >
            <Text styles={{ fontStyle: !theme.name ? 'italic' : 'normal' }}>
              {theme.name ? theme.name : 'Untitled theme'}
            </Text>
            <ChevronEndIcon styles={{ margin: '0 .5em' }} outline />
          </ThemeListItem>
        )
      })}
      <Button
        icon={<AddIcon outline />}
        content="Create a new theme"
        disabled={palettesIds.length < 1}
        onClick={() => {
          const nextTheme = themeTemplate()
          dispatch(themesSlice.actions.create(nextTheme))
          history.push(scoped(`/theme/${nextTheme.id}`))
        }}
      />
      <InFlowDocs>
        <Header as="h1">Using this tool</Header>
        <Text as="p">
          The best way to get started creating a color system with this tool is
          to first create one or more palettes, then assemble the palettes into
          themes. Each page in this tool has additional guidance specific to its
          function.
        </Text>
        <Header as="h2">About the data you create here</Header>
        <Text as="p">
          Your work is saved locally in your browser, not on any server, so
          anything you create here is unique to this browser on this device. You
          can save your work using the ‘Download’ action above, and restore from
          a file generated by this tool using the ‘Import’ action.
        </Text>
        <Text as="p">
          If you’re experiencing bugs, first record any details you want to
          keep, then click ‘Clear all data’ from the ‘…’ menu on this page, then
          start again. If after doing so you still experience a bug, we’d love
          it if you filed an{' '}
          <Link href="https://github.com/thure/cielab-curved-palette/issues">
            issue on Github
          </Link>
          .
        </Text>
      </InFlowDocs>
    </MainContent>
  )
}
